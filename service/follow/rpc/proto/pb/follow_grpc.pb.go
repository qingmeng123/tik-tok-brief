// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/follow.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowClient is the client API for Follow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowClient interface {
	//  获取关注信息
	GetFollowInfo(ctx context.Context, in *GetFollowInfoReq, opts ...grpc.CallOption) (*GetFollowInfoResp, error)
	// 获取关注列表
	GetFollowListByUserId(ctx context.Context, in *GetFollowListByUserIdReq, opts ...grpc.CallOption) (*GetFollowListByUserIdResp, error)
	// 获取粉丝列表
	GetFansListByUserId(ctx context.Context, in *GetFansListByUserIdReq, opts ...grpc.CallOption) (*GetFansListByUserIdResp, error)
	// 关注
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
	// 取消关注
	UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowResp, error)
	// 获取好友列表
	GetFriendsList(ctx context.Context, in *GetFriendsListReq, opts ...grpc.CallOption) (*GetFriendsListResp, error)
}

type followClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowClient(cc grpc.ClientConnInterface) FollowClient {
	return &followClient{cc}
}

func (c *followClient) GetFollowInfo(ctx context.Context, in *GetFollowInfoReq, opts ...grpc.CallOption) (*GetFollowInfoResp, error) {
	out := new(GetFollowInfoResp)
	err := c.cc.Invoke(ctx, "/follow.follow/GetFollowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowListByUserId(ctx context.Context, in *GetFollowListByUserIdReq, opts ...grpc.CallOption) (*GetFollowListByUserIdResp, error) {
	out := new(GetFollowListByUserIdResp)
	err := c.cc.Invoke(ctx, "/follow.follow/GetFollowListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFansListByUserId(ctx context.Context, in *GetFansListByUserIdReq, opts ...grpc.CallOption) (*GetFansListByUserIdResp, error) {
	out := new(GetFansListByUserIdResp)
	err := c.cc.Invoke(ctx, "/follow.follow/GetFansListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	out := new(FollowResp)
	err := c.cc.Invoke(ctx, "/follow.follow/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowResp, error) {
	out := new(UnFollowResp)
	err := c.cc.Invoke(ctx, "/follow.follow/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFriendsList(ctx context.Context, in *GetFriendsListReq, opts ...grpc.CallOption) (*GetFriendsListResp, error) {
	out := new(GetFriendsListResp)
	err := c.cc.Invoke(ctx, "/follow.follow/GetFriendsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServer is the server API for Follow service.
// All implementations must embed UnimplementedFollowServer
// for forward compatibility
type FollowServer interface {
	//  获取关注信息
	GetFollowInfo(context.Context, *GetFollowInfoReq) (*GetFollowInfoResp, error)
	// 获取关注列表
	GetFollowListByUserId(context.Context, *GetFollowListByUserIdReq) (*GetFollowListByUserIdResp, error)
	// 获取粉丝列表
	GetFansListByUserId(context.Context, *GetFansListByUserIdReq) (*GetFansListByUserIdResp, error)
	// 关注
	Follow(context.Context, *FollowReq) (*FollowResp, error)
	// 取消关注
	UnFollow(context.Context, *UnFollowReq) (*UnFollowResp, error)
	// 获取好友列表
	GetFriendsList(context.Context, *GetFriendsListReq) (*GetFriendsListResp, error)
	mustEmbedUnimplementedFollowServer()
}

// UnimplementedFollowServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServer struct {
}

func (UnimplementedFollowServer) GetFollowInfo(context.Context, *GetFollowInfoReq) (*GetFollowInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowInfo not implemented")
}
func (UnimplementedFollowServer) GetFollowListByUserId(context.Context, *GetFollowListByUserIdReq) (*GetFollowListByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowListByUserId not implemented")
}
func (UnimplementedFollowServer) GetFansListByUserId(context.Context, *GetFansListByUserIdReq) (*GetFansListByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFansListByUserId not implemented")
}
func (UnimplementedFollowServer) Follow(context.Context, *FollowReq) (*FollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowServer) UnFollow(context.Context, *UnFollowReq) (*UnFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (UnimplementedFollowServer) GetFriendsList(context.Context, *GetFriendsListReq) (*GetFriendsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsList not implemented")
}
func (UnimplementedFollowServer) mustEmbedUnimplementedFollowServer() {}

// UnsafeFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServer will
// result in compilation errors.
type UnsafeFollowServer interface {
	mustEmbedUnimplementedFollowServer()
}

func RegisterFollowServer(s grpc.ServiceRegistrar, srv FollowServer) {
	s.RegisterService(&Follow_ServiceDesc, srv)
}

func _Follow_GetFollowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/GetFollowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowInfo(ctx, req.(*GetFollowInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/GetFollowListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowListByUserId(ctx, req.(*GetFollowListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFansListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFansListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFansListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/GetFansListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFansListByUserId(ctx, req.(*GetFansListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).UnFollow(ctx, req.(*UnFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFriendsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFriendsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow.follow/GetFriendsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFriendsList(ctx, req.(*GetFriendsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Follow_ServiceDesc is the grpc.ServiceDesc for Follow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Follow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follow.follow",
	HandlerType: (*FollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowInfo",
			Handler:    _Follow_GetFollowInfo_Handler,
		},
		{
			MethodName: "GetFollowListByUserId",
			Handler:    _Follow_GetFollowListByUserId_Handler,
		},
		{
			MethodName: "GetFansListByUserId",
			Handler:    _Follow_GetFansListByUserId_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Follow_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _Follow_UnFollow_Handler,
		},
		{
			MethodName: "GetFriendsList",
			Handler:    _Follow_GetFriendsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/follow.proto",
}
