// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	UploadVideoByCos(ctx context.Context, in *UploadVideoByCosReq, opts ...grpc.CallOption) (*UploadVideoByCosResp, error)
	//流式传输文件
	UploadVideoStreamByCos(ctx context.Context, opts ...grpc.CallOption) (File_UploadVideoStreamByCosClient, error)
	// 上传视频到本地
	UploadVideoByLocal(ctx context.Context, opts ...grpc.CallOption) (File_UploadVideoByLocalClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) UploadVideoByCos(ctx context.Context, in *UploadVideoByCosReq, opts ...grpc.CallOption) (*UploadVideoByCosResp, error) {
	out := new(UploadVideoByCosResp)
	err := c.cc.Invoke(ctx, "/pb.file/UploadVideoByCos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UploadVideoStreamByCos(ctx context.Context, opts ...grpc.CallOption) (File_UploadVideoStreamByCosClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/pb.file/UploadVideoStreamByCos", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadVideoStreamByCosClient{stream}
	return x, nil
}

type File_UploadVideoStreamByCosClient interface {
	Send(*UploadVideoByCosReq) error
	CloseAndRecv() (*UploadVideoByCosResp, error)
	grpc.ClientStream
}

type fileUploadVideoStreamByCosClient struct {
	grpc.ClientStream
}

func (x *fileUploadVideoStreamByCosClient) Send(m *UploadVideoByCosReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadVideoStreamByCosClient) CloseAndRecv() (*UploadVideoByCosResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadVideoByCosResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) UploadVideoByLocal(ctx context.Context, opts ...grpc.CallOption) (File_UploadVideoByLocalClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[1], "/pb.file/UploadVideoByLocal", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadVideoByLocalClient{stream}
	return x, nil
}

type File_UploadVideoByLocalClient interface {
	Send(*UploadVideoByLocalReq) error
	CloseAndRecv() (*UploadVideoByLocalResp, error)
	grpc.ClientStream
}

type fileUploadVideoByLocalClient struct {
	grpc.ClientStream
}

func (x *fileUploadVideoByLocalClient) Send(m *UploadVideoByLocalReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadVideoByLocalClient) CloseAndRecv() (*UploadVideoByLocalResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadVideoByLocalResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	UploadVideoByCos(context.Context, *UploadVideoByCosReq) (*UploadVideoByCosResp, error)
	//流式传输文件
	UploadVideoStreamByCos(File_UploadVideoStreamByCosServer) error
	// 上传视频到本地
	UploadVideoByLocal(File_UploadVideoByLocalServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) UploadVideoByCos(context.Context, *UploadVideoByCosReq) (*UploadVideoByCosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoByCos not implemented")
}
func (UnimplementedFileServer) UploadVideoStreamByCos(File_UploadVideoStreamByCosServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideoStreamByCos not implemented")
}
func (UnimplementedFileServer) UploadVideoByLocal(File_UploadVideoByLocalServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideoByLocal not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_UploadVideoByCos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoByCosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UploadVideoByCos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.file/UploadVideoByCos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UploadVideoByCos(ctx, req.(*UploadVideoByCosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UploadVideoStreamByCos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).UploadVideoStreamByCos(&fileUploadVideoStreamByCosServer{stream})
}

type File_UploadVideoStreamByCosServer interface {
	SendAndClose(*UploadVideoByCosResp) error
	Recv() (*UploadVideoByCosReq, error)
	grpc.ServerStream
}

type fileUploadVideoStreamByCosServer struct {
	grpc.ServerStream
}

func (x *fileUploadVideoStreamByCosServer) SendAndClose(m *UploadVideoByCosResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadVideoStreamByCosServer) Recv() (*UploadVideoByCosReq, error) {
	m := new(UploadVideoByCosReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_UploadVideoByLocal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).UploadVideoByLocal(&fileUploadVideoByLocalServer{stream})
}

type File_UploadVideoByLocalServer interface {
	SendAndClose(*UploadVideoByLocalResp) error
	Recv() (*UploadVideoByLocalReq, error)
	grpc.ServerStream
}

type fileUploadVideoByLocalServer struct {
	grpc.ServerStream
}

func (x *fileUploadVideoByLocalServer) SendAndClose(m *UploadVideoByLocalResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadVideoByLocalServer) Recv() (*UploadVideoByLocalReq, error) {
	m := new(UploadVideoByLocalReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.file",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadVideoByCos",
			Handler:    _File_UploadVideoByCos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadVideoStreamByCos",
			Handler:       _File_UploadVideoStreamByCos_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadVideoByLocal",
			Handler:       _File_UploadVideoByLocal_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/file.proto",
}
