// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTikTokUserUserIdPrefix       = "cache:tikTokUser:user:id:"
	cacheTikTokUserUserUserIdPrefix   = "cache:tikTokUser:user:userId:"
	cacheTikTokUserUserUsernamePrefix = "cache:tikTokUser:user:username:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByUserId(ctx context.Context, userId int64) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id              int64          `db:"id"`
		UserId          int64          `db:"user_id"`
		Username        string         `db:"username"`
		Password        string         `db:"password"`
		Name            sql.NullString `db:"name"`
		FollowCount     sql.NullInt64  `db:"follow_count"`
		FollowerCount   sql.NullInt64  `db:"follower_count"`
		IsFollow        int64          `db:"is_follow"`
		Avatar          sql.NullString `db:"avatar"`
		BackgroundImage sql.NullString `db:"background_image"`
		Signature       sql.NullString `db:"signature"`
		TotalFavorited  int64          `db:"total_favorited"`
		WorkCount       int64          `db:"work_count"`
		FavoriteCount   int64          `db:"favorite_count"`
		CreateTime      time.Time      `db:"create_time"`
		UpdateTime      time.Time      `db:"update_time"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tikTokUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserIdPrefix, id)
	tikTokUserUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUserIdPrefix, data.UserId)
	tikTokUserUserUsernameKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tikTokUserUserIdKey, tikTokUserUserUserIdKey, tikTokUserUserUsernameKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	tikTokUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, tikTokUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUserId(ctx context.Context, userId int64) (*User, error) {
	tikTokUserUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUserIdPrefix, userId)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, tikTokUserUserUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	tikTokUserUserUsernameKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, tikTokUserUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	tikTokUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserIdPrefix, data.Id)
	tikTokUserUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUserIdPrefix, data.UserId)
	tikTokUserUserUsernameKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Username, data.Password, data.Name, data.FollowCount, data.FollowerCount, data.IsFollow, data.Avatar, data.BackgroundImage, data.Signature, data.TotalFavorited, data.WorkCount, data.FavoriteCount)
	}, tikTokUserUserIdKey, tikTokUserUserUserIdKey, tikTokUserUserUsernameKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tikTokUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserIdPrefix, data.Id)
	tikTokUserUserUserIdKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUserIdPrefix, data.UserId)
	tikTokUserUserUsernameKey := fmt.Sprintf("%s%v", cacheTikTokUserUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Username, newData.Password, newData.Name, newData.FollowCount, newData.FollowerCount, newData.IsFollow, newData.Avatar, newData.BackgroundImage, newData.Signature, newData.TotalFavorited, newData.WorkCount, newData.FavoriteCount, newData.Id)
	}, tikTokUserUserIdKey, tikTokUserUserUserIdKey, tikTokUserUserUsernameKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTikTokUserUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
