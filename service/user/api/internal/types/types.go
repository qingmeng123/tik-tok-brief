// Code generated by goctl. DO NOT EDIT.
package types

type User struct {
	UserId         int64  `json:"id"`
	Username       string `json:"name"`
	FollowCount    int64  `json:"follow_count"`
	FollowerCount  int64  `json:"follower_count"`
	IsFollow       bool   `json:"is_follow"`
	TotalFavorited int64  `json:"total_favorited,optional"`
	WorkCount      int64  `json:"work_count,optional"`
	FavoriteCount  int64  `json:"favorite_count,optional"`
}

type StatusResponse struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional,"`
}

type RegisterRequest struct {
	Username string `form:"username" validate:"required,max=32,min=1"`
	Password string `form:"password" validate:"required,max=32,min=1"`
}

type RegisterResponse struct {
	StatusResponse
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

type LoginReq struct {
	Username string `form:"username" validate:"required,max=32,min=1"`
	Password string `form:"password" validate:"required,max=32,min=1"`
}

type LoginResp struct {
	StatusResponse
	UserId int64  `json:"user_id,omitempty"`
	Token  string `json:"token,omitempty"`
}

type UserInfoReq struct {
	UserId int64  `form:"user_id" validate:"required,gte=0"`
	Token  string `form:"token"`
}

type UserInfoResp struct {
	StatusResponse
	User User `json:"user,omitempty"`
}

type FollowReq struct {
	Token      string `form:"token" validate:"required"`
	ToUserId   int64  `form:"to_user_id" validate:"required,gte=0"`
	ActionType int64  `form:"action_type" validate:"required,gte=1,lte=2"`
}

type FollowResp struct {
	StatusResponse
}

type FollowListReq struct {
	Token  string `form:"token" validate:"required"`
	UserId int64  `form:"user_id" validate:"required,gte=0"`
}

type FollowListResp struct {
	StatusResponse
	UserList []User `json:"user_list,omitempty"`
}

type FollowerListReq struct {
	Token  string `form:"token" validate:"required"`
	UserId int64  `form:"user_id" validate:"required,gte=0"`
}

type FollowerListResp struct {
	StatusResponse
	UserList []User `json:"user_list,omitempty"`
}

type FriendsListReq struct {
	Token  string `form:"token" validate:"required"`
	UserId int64  `form:"user_id" validate:"required,gte=0"`
}

type FriendsListResp struct {
	StatusResponse
	UserList []FriendUser `json:"user_list,omitempty"`
}

type FriendUser struct {
	User
	Message string `json:"message,optional"`
	MsgType int64  `json:"msgType,required"`
}

type Message struct {
	Id         int64  `json:"id"`
	ToUserId   int64  `json:"to_user_id"`
	FromUserId int64  `json:"from_user_id"`
	Content    string `json:"content"`
	CreateTime string `json:"create_time"`
}

type SendMessageReq struct {
	Token      string `form:"token" validate:"required"`
	ToUserId   int64  `form:"to_user_id" validate:"required,gte=0"`
	ActionType int64  `form:"action_type" validate:"required,gte=1,lte=2"`
	Content    string `form:"content" validate:"required"`
}

type SendMessageResp struct {
	StatusResponse
}

type HistoryMessageReq struct {
	Token    string `form:"token" validate:"required"`
	ToUserId int64  `form:"to_user_id" validate:"required,gte=0"`
}

type HistoryMessageResp struct {
	StatusResponse
	MessageList []Message `json:"message_list,omitempty"`
}
