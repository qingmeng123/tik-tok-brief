// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package video

import (
	"context"

	"tik-tok-brief/service/video/rpc/proto/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FeedReq         = pb.FeedReq
	FeedResp        = pb.FeedResp
	PublishListReq  = pb.PublishListReq
	PublishListResp = pb.PublishListResp
	SaveVideoReq    = pb.SaveVideoReq
	SaveVideoResp   = pb.SaveVideoResp
	Video           = pb.Video

	VideoZrpcClient interface {
		// 保存视频信息到数据库
		SaveVideo(ctx context.Context, in *SaveVideoReq, opts ...grpc.CallOption) (*SaveVideoResp, error)
		// 查看某用户id的视频列表
		PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		// 视频流
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
	}

	defaultVideoZrpcClient struct {
		cli zrpc.Client
	}
)

func NewVideoZrpcClient(cli zrpc.Client) VideoZrpcClient {
	return &defaultVideoZrpcClient{
		cli: cli,
	}
}

// 保存视频信息到数据库
func (m *defaultVideoZrpcClient) SaveVideo(ctx context.Context, in *SaveVideoReq, opts ...grpc.CallOption) (*SaveVideoResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.SaveVideo(ctx, in, opts...)
}

// 查看某用户id的视频列表
func (m *defaultVideoZrpcClient) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

// 视频流
func (m *defaultVideoZrpcClient) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}
