// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chat

import (
	"context"

	"tik-tok-brief/service/chat/rpc/proto/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetHistoryMessageReq  = pb.GetHistoryMessageReq
	GetHistoryMessageResp = pb.GetHistoryMessageResp
	GetLatestMessageReq   = pb.GetLatestMessageReq
	GetLatestMessageResp  = pb.GetLatestMessageResp
	Message               = pb.Message
	SendMessageReq        = pb.SendMessageReq
	SendMessageResp       = pb.SendMessageResp

	Chat interface {
		// 发送消息
		SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
		// 获取历史消息
		GetHistoryMessage(ctx context.Context, in *GetHistoryMessageReq, opts ...grpc.CallOption) (*GetHistoryMessageResp, error)
		// 获取双方最新的一条消息
		GetLatestMessage(ctx context.Context, in *GetLatestMessageReq, opts ...grpc.CallOption) (*GetLatestMessageResp, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

// 发送消息
func (m *defaultChat) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	client := pb.NewChatClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

// 获取历史消息
func (m *defaultChat) GetHistoryMessage(ctx context.Context, in *GetHistoryMessageReq, opts ...grpc.CallOption) (*GetHistoryMessageResp, error) {
	client := pb.NewChatClient(m.cli.Conn())
	return client.GetHistoryMessage(ctx, in, opts...)
}

// 获取双方最新的一条消息
func (m *defaultChat) GetLatestMessage(ctx context.Context, in *GetLatestMessageReq, opts ...grpc.CallOption) (*GetLatestMessageResp, error) {
	client := pb.NewChatClient(m.cli.Conn())
	return client.GetLatestMessage(ctx, in, opts...)
}
