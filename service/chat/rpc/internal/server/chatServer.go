// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package server

import (
	"context"

	"tik-tok-brief/service/chat/rpc/internal/logic"
	"tik-tok-brief/service/chat/rpc/internal/svc"
	"tik-tok-brief/service/chat/rpc/proto/pb"
)

type ChatServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedChatServer
}

func NewChatServer(svcCtx *svc.ServiceContext) *ChatServer {
	return &ChatServer{
		svcCtx: svcCtx,
	}
}

// 发送消息
func (s *ChatServer) SendMessage(ctx context.Context, in *pb.SendMessageReq) (*pb.SendMessageResp, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

// 获取历史消息
func (s *ChatServer) GetHistoryMessage(ctx context.Context, in *pb.GetHistoryMessageReq) (*pb.GetHistoryMessageResp, error) {
	l := logic.NewGetHistoryMessageLogic(ctx, s.svcCtx)
	return l.GetHistoryMessage(in)
}

// 获取双方最新的一条消息
func (s *ChatServer) GetLatestMessage(ctx context.Context, in *pb.GetLatestMessageReq) (*pb.GetLatestMessageResp, error) {
	l := logic.NewGetLatestMessageLogic(ctx, s.svcCtx)
	return l.GetLatestMessage(in)
}
