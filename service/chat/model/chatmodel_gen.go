// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatFieldNames          = builder.RawFieldNames(&Chat{})
	chatRows                = strings.Join(chatFieldNames, ",")
	chatRowsExpectAutoSet   = strings.Join(stringx.Remove(chatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRowsWithPlaceHolder = strings.Join(stringx.Remove(chatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTikTokChatChatIdPrefix = "cache:tikTokChat:chat:id:"
)

type (
	chatModel interface {
		Insert(ctx context.Context, data *Chat) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Chat, error)
		Update(ctx context.Context, data *Chat) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatModel struct {
		sqlc.CachedConn
		table string
	}

	Chat struct {
		Id         int64     `db:"id"`           // id
		FromUserId int64     `db:"from_user_id"` // 发送用户id
		ToUserId   int64     `db:"to_user_id"`   // 接收消息用户id
		Content    string    `db:"content"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newChatModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatModel {
	return &defaultChatModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`chat`",
	}
}

func (m *defaultChatModel) Delete(ctx context.Context, id int64) error {
	tikTokChatChatIdKey := fmt.Sprintf("%s%v", cacheTikTokChatChatIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tikTokChatChatIdKey)
	return err
}

func (m *defaultChatModel) FindOne(ctx context.Context, id int64) (*Chat, error) {
	tikTokChatChatIdKey := fmt.Sprintf("%s%v", cacheTikTokChatChatIdPrefix, id)
	var resp Chat
	err := m.QueryRowCtx(ctx, &resp, tikTokChatChatIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatModel) Insert(ctx context.Context, data *Chat) (sql.Result, error) {
	tikTokChatChatIdKey := fmt.Sprintf("%s%v", cacheTikTokChatChatIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, chatRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FromUserId, data.ToUserId, data.Content)
	}, tikTokChatChatIdKey)
	return ret, err
}

func (m *defaultChatModel) Update(ctx context.Context, data *Chat) error {
	tikTokChatChatIdKey := fmt.Sprintf("%s%v", cacheTikTokChatChatIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FromUserId, data.ToUserId, data.Content, data.Id)
	}, tikTokChatChatIdKey)
	return err
}

func (m *defaultChatModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTikTokChatChatIdPrefix, primary)
}

func (m *defaultChatModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatModel) tableName() string {
	return m.table
}
